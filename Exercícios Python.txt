Exercícios Parte 1

Desenvolva um código Python que lê do teclado nome e a idade atual de uma pessoa. Como saída, imprima o ano em que a pessoa completará 100 anos de idade.



import datetime
nome = str(input("Digite seu nome:   "))
idade = int(input("Digite sua idade:   "))

ano_atual = datetime.date.today().year
ano_cem = ano_atual + (100 - idade)

print(int(ano_cem))

--------------------------------------
Exercícios Parte 2

Escreva um código Python para verificar se três números digitados na entrada padrão são pares ou ímpares. Para cada número, imprima como saída Par: ou Ímpar: e o número correspondente (um linha para cada número lido).

Importante: Aplique a função range() em seu código.



# Função para verificar se um número é par ou ímpar
def verificar_par_impar(numero):
    if numero % 2 == 0:
        return "Par"
    else:
        return "Ímpar"

# Loop para obter três números da entrada padrão
for i in range(3):
    numero = int(input(f"Digite o {i+1}º número: "))
    resultado = verificar_par_impar(numero)
    print(f"{resultado}: {numero}")

--------------------------------------
Exercícios Parte 3

Escreva um código Python para imprimir os números pares de 0 até 20 (incluso).

Importante: Aplique a função range() em seu código.



# Imprimir números pares de 0 até 20
for pares in range(0, 21, 2):
    print(pares)

--------------------------------------
Exercícios Parte 4

Escreva um código Python para imprimir todos os números primos entre 1 até 100. Lembre-se que você deverá desenvolver o cálculo que identifica se um número é primo ou não.

Importante: Aplique a função range().



# Função para verificar se um número é primo
def verificar_primo(numero):
    if numero <= 1:
        return False
    elif numero <= 3:
        return True
    elif numero % 2 == 0 or numero % 3 == 0:
        return False

    i = 5
    while i * i <= numero:
        if numero % i == 0 or numero % (i + 2) == 0:
            return False
        i += 6

    return True

# Imprimir números primos de 1 até 100
for numero in range(1, 101):
    if verificar_primo(numero):
        print(numero)

--------------------------------------
Exercícios Parte 5

Escreva um código Python que declara 3 variáveis:

dia, inicializada com valor 22
mes, inicializada com valor 10 e
ano, inicializada com valor 2022

Como saída, você deverá imprimir a data correspondente, no formato a seguir dia/mes/ano.



# Variáveis
dia = 22
mes = 10
ano = 2022

# Data no formato dia/mes/ano
print(f"{dia}/{mes}/{ano}")

--------------------------------------
Exercícios Parte 6

Considere as duas listas abaixo:

a = [1, 1, 2, 3, 5, 8, 14, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Escreva um programa para avaliar o que ambas as listas têm em comum (sem repetições), imprimindo a lista de valores da interseção na saída padrão.



# Listas de entrada
a = [1, 1, 2, 3, 5, 8, 14, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Converte as listas em conjuntos para remover repetições
conjunto_a = set(a)
conjunto_b = set(b)

# Interseção entre os conjuntos
intersecao = conjunto_a.intersection(conjunto_b)

# Lista de valores da interseção
print(list(intersecao))

--------------------------------------
Exercícios Parte 7

Dada a seguinte lista:

a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

Faça um programa que gere uma nova lista contendo apenas números ímpares.



# Lista 
a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# Lista contendo apenas números ímpares
numeros_impares = [numero for numero in a if numero % 2 != 0]

# Nova lista
print(numeros_impares)

--------------------------------------
Exercícios Parte 8

Verifique se cada uma das palavras da lista ['maça', 'arara', 'audio', 'radio', 'radar', 'moto'] é ou não um palíndromo.

Obs: Palíndromo é uma palavra que permanece igual se lida de traz pra frente.

É necessário que você imprima no console exatamente assim:

A palavra: maça não é um palíndromo
 
A palavra: arara é um palíndromo
 
A palavra: audio não é um palíndromo
 
A palavra: radio não é um palíndromo
 
A palavra: radar é um palíndromo
 
A palavra: moto não é um palíndromo



# Lista de palavras
palavras = ['maça', 'arara', 'audio', 'radio', 'radar', 'moto']

# Função para verificar se uma palavra é um palíndromo
def verificar_palindromo(palavra):
    return palavra == palavra[::-1]

# Verificar e imprimir o resultado para cada palavra
for palavra in palavras:
    if verificar_palindromo(palavra):
        print(f"A palavra: {palavra} é um palíndromo")
    else:
        print(f"A palavra: {palavra} não é um palíndromo")

--------------------------------------
Exercícios Parte 9

Dada as listas a seguir:

primeirosNomes = ['Joao', 'Douglas', 'Lucas', 'José']
sobreNomes = ['Soares', 'Souza', 'Silveira', 'Pedreira']
idades = [19, 28, 25, 31]

Faça um programa que imprima o dados na seguinte estrutura: "índice - primeiroNome sobreNome está com idade anos".

Exemplo:
0 - João Soares está com 19 anos
Você deve Utilizar a função enumerate().



# Listas de dados
primeirosNomes = ['Joao', 'Douglas', 'Lucas', 'José']
sobreNomes = ['Soares', 'Souza', 'Silveira', 'Pedreira']
idades = [19, 28, 25, 31]

# Função enumerate() para imprimir os dados
for indice, (primeiroNome, sobreNome, idade) in enumerate(zip(primeirosNomes, sobreNomes, idades)):
    print(f"{indice} - {primeiroNome} {sobreNome} está com {idade} anos")

--------------------------------------
Exercícios Parte 10

Escreva uma função que recebe uma lista e retorna uma nova lista sem elementos duplicados. Utilize a lista a seguir para testar sua função.

['abc', 'abc', 'abc', '123', 'abc', '123', '123']



def remover_duplicatas(lista):
    return list(set(lista))

# Lista de entrada
entrada = ['abc', 'abc', 'abc', '123', 'abc', '123', '123']

# Nova lista sem elementos duplicados
nova_lista = remover_duplicatas(entrada)
print(nova_lista)

--------------------------------------
Exercícios Parte 11

Escreva um programa que lê o conteúdo do arquivo texto arquivo_texto.txt e imprime o seu conteúdo.

Dica: leia a documentação da função open(...)



nome_arquivo = "arquivo_texto.txt"

try:
    with open(nome_arquivo,'r') as arquivo:
        cont = arquivo.read()
        print(cont , end="")
except FileNotFoundError:
    print(f"O arquivo '{nome_arquivo}' não foi encontrado")
except IOError as e:
    print(f"Ocorreu um erro ao ler o arquivo:{e}")

--------------------------------------
Exercícios Parte 12

Leia o arquivo person.json, faça o parsing e imprima seu conteúdo.

Dica: leia a documentação do pacote json



import json

# Abre o arquivo json em modo de leitura
with open('person.json', 'r') as arquivo:
    conteudo_json = json.load(arquivo)

# Imprime o conteúdo do arquivo json
print(conteudo_json)

--------------------------------------
Exercícios Parte 13

Implemente a função my_map(list, f) que recebe uma lista como primeiro argumento e uma função como segundo argumento. Esta função aplica a função recebida para cada elemento da lista recebida e retorna o resultado em uma nova lista.

Teste sua função com a lista de entrada [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] e com uma função que potência de 2 para cada elemento.



def my_map(lista, funcao):
    resultado = []
    for elemento in lista:
        resultado.append(funcao(elemento))
    return resultado

# Função de exemplo para calcular a potência de 2
def potencia_de_2(numero):
    return numero ** 2

# Lista de entrada
lista_numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Aplica a função my_map() com a função potencia_de_2
resultado = my_map(lista_numeros, potencia_de_2)

# Imprime o resultado
print(resultado)

--------------------------------------
Exercícios Parte 14

Escreva uma função que recebe um número variável de parâmetros não nomeados e um número variado de parâmetros nomeados e imprime o valor de cada parâmetro recebido.

Teste sua função com os seguintes parâmetros:
(1, 3, 4, 'hello', parametro_nomeado='alguma coisa', x=20)



def print_params(*args, **kwargs):
  for arg in args:
    print(arg)
  for value in kwargs.values():
    print(f'{value}')

print_params(1, 3, 4, 'hello', parametro_nomeado='alguma coisa', x=20)

--------------------------------------
Exercícios Parte 15

Implemente a classe Lampada. A classe Lâmpada recebe um booleano no seu construtor, True se a lâmpada estiver ligada, False caso esteja desligada. A classe Lampada possui os seguintes métodos:

liga(): muda o estado da lâmpada para ligada

desliga(): muda o estado da lâmpada para desligada

esta_ligada(): retorna verdadeiro se a lâmpada estiver ligada, falso caso contrário

Para testar sua classe:

Ligue a Lampada

Imprima: A lâmpada está ligada? True

Desligue a Lampada

Imprima: A lâmpada ainda está ligada? False



class Lampada:
    def __init__(self, ligada=False):
        self.ligada = ligada
    
    def liga(self):
        self.ligada = True
    
    def desliga(self):
        self.ligada = False
    
    def esta_ligada(self):
        return self.ligada

# Teste da classe
lampada = Lampada()

lampada.liga()
print("A lâmpada está ligada?", lampada.esta_ligada())

lampada.desliga()
print("A lâmpada ainda está ligada?", lampada.esta_ligada())

--------------------------------------
Exercícios Parte 16

Escreva uma função que recebe uma string de números separados por vírgula e retorne a soma de todos eles. Depois imprima a soma dos valores.

A string deve ter valor  "1,3,4,6,10,76"



def soma_string(string):
	numeros=string.split(",")
	soma=0
	for numero in numeros:
		soma+=int(numero)
	return soma

string='1,3,4,6,10,76'
soma=soma_string(string)
print(soma)

--------------------------------------
Exercícios Parte 17

Escreva uma função que recebe como parâmetro uma lista e retorna 3 listas: a lista recebida dividida em 3 partes iguais. Teste sua implementação com a lista abaixo

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]



def dividir_lista(lista, numero_partes):
 tamanho = len(lista)
 partes = tamanho // numero_partes
 
 listas_divididas = [lista[i * partes: (i + 1) * partes] for i in range (numero_partes)]
 
 return listas_divididas
 
lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
numero_partes = 3
listas_divididas = dividir_lista(lista,numero_partes)

print(listas_divididas[0], end=' ')
print(listas_divididas[1], end=' ')
print(listas_divididas[2])

--------------------------------------
Exercícios Parte 18

Dado o dicionário a seguir:

speed = {'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53, 'july':54, 'Aug':44, 'Sept':54}

Crie uma lista com todos os valores (não as chaves!) e coloque numa lista de forma que não haja valores duplicados.



speed = {'jan': 47, 'feb': 52, 'march': 47, 'April': 44, 'May': 52, 'June': 53, 'july': 54, 'Aug': 44, 'Sept': 54}

valores_sem_duplicatas = list(set(speed.values()))

print(valores_sem_duplicatas)


--------------------------------------
Exercícios Parte 19

Calcule o valor mínimo, valor máximo, valor médio e a mediana da lista gerada na célula abaixo:

Obs.: Lembrem-se, para calcular a mediana a lista deve estar ordenada!

import random 
# amostra aleatoriamente 50 números do intervalo 0...500
random_list = random.sample(range(500),50)

Use as variáveis abaixo para representar cada operação matemática:
mediana
media
valor_minimo 
valor_maximo 



import random

# Amostra aleatoriamente 50 números do intervalo 0...500
random_list = random.sample(range(500), 50)

# Ordena a lista para calcular a mediana
random_list.sort()

# Calcula o valor mínimo, valor máximo e valor médio
valor_minimo = min(random_list)
valor_maximo = max(random_list)
media = sum(random_list) / len(random_list)

# Calcula a mediana
tamanho_lista = len(random_list)
if tamanho_lista % 2 == 0:
    mediana = (random_list[tamanho_lista//2 - 1] + random_list[tamanho_lista//2]) / 2
else:
    mediana = random_list[tamanho_lista//2]

# Imprime os resultados
print("Mediana:", mediana)
print("Média:", media)
print("Valor Mínimo:", valor_minimo)
print("Valor Máximo:", valor_maximo)


--------------------------------------
Exercícios Parte 20

Imprima a lista abaixo de trás para frente.
a = [1, 0, 2, 3, 5, 8, 13, 21, 34, 55, 89]



a = [1, 0, 2, 3, 5, 8, 13, 21, 34, 55, 89]

print(a[::-1])

--------------------------------------
Exercícios Parte 21

Implemente duas classes Pato e Pardal que herdem de uma classe Passaro a habilidade de voar e emitir som, porém, tanto Pato quanto Pardal devem emitir sons diferentes (de maneira escrita) no console.

Imprima no console exatamente assim:

Pato
Voando...
Pato emitindo som...
Quack Quack
Pardal
Voando...
Pardal emitindo som...
Piu Piu



class Passaro:
    def voar(self):
        print("Voando...")
    
    def emitir_som(self, som):
        print("Emitindo som...")
        print(som)

class Pato(Passaro):
    def emitir_som(self):
        som = "Quack Quack"
        super().emitir_som(som)

class Pardal(Passaro):
    def emitir_som(self):
        som = "Piu Piu"
        super().emitir_som(som)


pato = Pato()
print("Pato")
pato.voar()
pato.emitir_som()
pardal = Pardal()
print("\nPardal")
pardal.voar()
pardal.emitir_som()

--------------------------------------
Exercícios Parte 22

Crie uma classe chamada "Pessoa" com um atributo privado "nome" (representado como "__nome") e um atributo público "id". Adicione duas funções à classe, uma para definir o valor de "nome" e outra para obter o valor de "nome". Observe que o atributo "nome" deve ser privado e acessado somente através dessas funções.

Para testar seu código use:

pessoa = Pessoa(0) 
pessoa.nome = 'Fulano De Tal'
print(pessoa.nome)



class Pessoa:
    def __init__(self, id):
        self.id = id
        self.__nome = None
    
    @property
    def nome(self):
        return self.__nome
    
    @nome.setter
    def nome(self, novo_nome):
        self.__nome = novo_nome

# Teste da classe
pessoa = Pessoa(0)
pessoa.nome = 'Fulano De Tal'
print(pessoa.nome)

--------------------------------------
Exercícios Parte 23

Crie uma classe  Calculo  que contenha um método que aceita dois parâmetros, X e Y, e retorne a soma dos dois. Nessa mesma classe, implemente um método de subtração, que aceita dois parâmetros, X e Y, e retorne a subtração dos dois (resultados negativos são permitidos).

Utilize os valores abaixo para testar seu exercício:

x = 4 
y = 5

imprima:
Somando: 4+5 = 9
Subtraindo: 4-5 = -1



class Calculo:
    def soma(self, x, y):
        return x + y
    
    def subtracao(self, x, y):
        return x - y

# Valores a serem testados
x = 4
y = 5

calculo = Calculo()

resultado_soma = calculo.soma(x, y)
resultado_subtracao = calculo.subtracao(x, y)

print(f"Somando: {x} + {y} = {resultado_soma}")
print(f"Subtraindo: {x} - {y} = {resultado_subtracao}")

--------------------------------------
Exercícios Parte 24

Crie uma classe Ordenadora que contenha um atributo listaBaguncada e que contenha os métodos ordenacaoCrescente e ordenacaoDecrescente.

Instancie um objeto chamado crescente dessa classe Ordenadora que tenha como listaBaguncada a lista [3,4,2,1,5] e instancie um outro objeto, decrescente dessa mesma classe com uma outra listaBaguncada sendo [9,7,6,8].

Para o primeiro objeto citado, use o método ordenacaoCrescente e para o segundo objeto, use o método ordenacaoDecrescente.

Imprima o resultado da ordenação crescente e da ordenação decrescente igual a seguir:

[1, 2, 3, 4, 5] 
[9, 8, 7, 6]



class Ordenadora:
    def __init__(self, listaBaguncada):
        self.listaBaguncada = listaBaguncada
    
    def ordenacaoCrescente(self):
        self.listaBaguncada.sort()
    
    def ordenacaoDecrescente(self):
        self.listaBaguncada.sort(reverse=True)

# Teste da classe
crescente = Ordenadora([3, 4, 2, 1, 5])
crescente.ordenacaoCrescente()
print(crescente.listaBaguncada)

decrescente = Ordenadora([9, 7, 6, 8])
decrescente.ordenacaoDecrescente()
print(decrescente.listaBaguncada)

--------------------------------------
Exercícios Parte 25

Crie uma classe Avião que possua os atributos modelo, velocidade_maxima, cor e capacidade.

Defina o atributo cor de sua classe , de maneira que todas as instâncias de sua classe avião sejam da cor “azul”.

Após isso, a partir de entradas abaixo, instancie e armazene em uma lista 3 objetos da classe Avião.

Ao final, itere pela lista imprimindo cada um dos objetos no seguinte formato:

“O avião de modelo “x” possui uma velocidade máxima de “y”, capacidade para “z” passageiros e é da cor “w”.

Sendo x, y, z e w cada um dos atributos da classe “Avião”.


Valores de entrada:

modelo BOIENG456: velocidade máxima 1500 km/h: capacidade para 400 passageiros: Cor Azul

modelo Embraer Praetor 600: velocidade máxima 863km/h: capacidade para 14 passageiros: Cor Azul

modelo Antonov An-2: velocidade máxima de 258 Km/h: capacidade para 12 passageiros: Cor Azul


class Aviao:
    cor="Azul"
    
    def __init__(self, modelo, velocidade_maxima, capacidade):
        self.modelo = modelo
        self.velocidade_maxima = velocidade_maxima
        self.capacidade = capacidade